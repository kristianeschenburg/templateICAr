ii=1
if(verbose) cat(paste0('\n Reading in data for subject ',ii,' of ',N))
#read in BOLD
fname_ii <- nifti_fnames[ii]
fname_ii
if(!file.exists(fname_ii)) {
missing_data <- c(missing_data, fname_ii)
if(verbose) cat(paste0('\n Data not available'))
next
}
BOLD1_ii <- readNIfTI(fname_ii, reorient = TRUE)
ntime <- dim(BOLD1_ii)[4]
ntime
ntime_vec <- c(ntime_vec, ntime)
if(length(ntime_vec)>2){
if(var(ntime_vec) > 0) stop('All BOLD timeseries should have the same duration')
}
BOLD1_ii_mat <- matrix(NA, nvox, ntime)
BOLD1_ii_mat <- matrix(NA, V, ntime)
for(t in 1:ntime){
BOLD1_ii_mat[,t] <- BOLD1_ii[,,,t][mask==1]
}
if(nrow(BOLD1_ii_mat) != nrow(GICA_mat)) stop(paste0('The number of data locations in GICA and BOLD timeseries data from subject ',ii,' do not match.'))
rm(BOLD1_ii)
#read in BOLD retest data OR create pseudo test-retest data
if(!retest){
part1 <- 1:round(ntime/2)
part2 <- setdiff(1:ntime, part1)
BOLD2_ii_mat <- BOLD1_ii_mat[,part2]
BOLD1_ii_mat <- BOLD1_ii_mat[,part1]
} else {
#read in BOLD from retest
fname_ii <- nifti_fnames2[ii]
if(!file.exists(fname_ii)) {
missing_data <- c(missing_data, fname_ii)
if(verbose) cat(paste0('\n Data not available'))
next
}
BOLD2_ii <- readNIfTI(fname_ii, reorient = TRUE)
if(dim(BOLD2_ii)[4] != ntime) stop('Retest BOLD data has different duration from first session.')
BOLD2_ii_mat <- matrix(NA, nvox, ntime)
for(t in 1:ntime){
BOLD2_ii_mat[,t] <- BOLD2_ii[,,,t][mask==1]
}
rm(BOLD2_ii)
if(nrow(BOLD2_ii_mat) != nrow(GICA_mat)) stop(paste0('The number of data locations in GICA and BOLD retest timeseries data from subject ',ii,' do not match.'))
}
dim(BOLD1_ii_mat)
tmp <- rowVars(BOLD1_ii_mat)
library(matrixStats)
tmp <- rowVars(BOLD1_ii_mat)
min(tmp)
sum(tmp==0)
tmp2 <- rowVars(BOLD2_ii_mat)
min(tmp2)
sum(tmp2==0)
flat_vox <- ((rowVars(BOLD1_ii_mat)==0) | (rowVars(BOLD2_ii_mat)==0))
sum(flat_vox)
length(flat_vox)
mask2 = mask
mask2[mask2==1] <- (!flat_vox)
sum(mask)
sum(mask2)
dim(GICA_mat)
dim(BOLD1_ii_mat)
if(sum(flat_vox)>0) {
warning(paste0(sum(flat_vox), ' flat voxels detected. Removing these from the mask for this and future subjects. Updated mask will be returned with estimated templates.'))
mask2[mask2==1] <- (!flat_vox)
GICA_mat <- GICA_mat[!flat_vox,]
BOLD1_ii_mat <- BOLD1_ii_mat[!flat_vox,]
BOLD2_ii_mat <- BOLD2_ii_mat[!flat_vox,]
}
mask2 = mask
warning(paste0(sum(flat_vox), ' flat voxels detected. Removing these from the mask for this and future subjects. Updated mask will be returned with estimated templates.'))
mask2[mask2==1] <- (!flat_vox)
GICA_mat <- GICA_mat[!flat_vox,]
dim(GICA_mat)
head(flat_vox)
nvox
V
BOLD1_ii_mat <- BOLD1_ii_mat[!flat_vox,]
dim(BOLD1_ii_mat)
dim(BOLD2_ii_mat)
V
V <- sum(mask2)
#perform dual regression on test and retest data
DR1_ii <- dual_reg(BOLD1_ii_mat, GICA_mat, scale=scale)$S
#' Dual Regression
#'
#' @param dat Subject-level fMRI data (VxT)
#' @param GICA Group-level independent components (VxQ)
#' @param scale A logical value indicating whether the fMRI timeseries should be scaled by the image standard deviation.
#'
#' @return A list containing the subject-level independent components S (VxQ), subject-level mixing matrix A (TxQ), and the row- and column- centered fMRI data (VxT)
#' @export
#' @importFrom matrixStats colVars
#'
dual_reg <- function(dat, GICA, scale=FALSE){
ntime <- ncol(dat) #length of timeseries
nvox <- nrow(dat) #number of data locations
if(ntime > nvox) warning('More time points than voxels. Are you sure?')
if(nvox != nrow(GICA)) stop('The number of voxels in dat and GICA must match')
Q <- ncol(GICA) #number of ICs
if(Q > nvox) warning('More ICs than voxels. Are you sure?')
if(Q > ntime) warning('More ICs than time points. Are you sure?')
#center timeseries data across space and time (and standardize scale if scale=TRUE)
dat_ctr <- scale_BOLD(dat, scale=scale)
dat_ctr_t <- t(dat_ctr)
#center each group IC over voxels
GICA <- scale(GICA, scale=FALSE)
#estimate A (IC timeseries)
A <- dat_ctr_t %*% GICA %*% solve(t(GICA) %*% GICA)
#fix scale of timeseries (sd=1)
sd_A <- sqrt(colVars(A))
D <- diag(1/sd_A)
A <- A %*% D
#estimate S (IC maps)
S <- solve(a=(t(A) %*% A), b=(t(A) %*% dat_ctr_t))
#return result
result <- list(S = S, A = A, dat_ctr = dat_ctr)
return(result)
}
#perform dual regression on test and retest data
DR1_ii <- dual_reg(BOLD1_ii_mat, GICA_mat, scale=scale)$S
#' and in the second step treats voxels as observations. Neither regression includes an intercept, so the BOLD timeseries must be centered across
#' both space and time. The group independent components used in the first regression must also be centered across space.  The mixing matrix estimated
#' in the first step of dual regression is also centered across time as a result.
#'
#' In order to ensure that all fMRI data share the same scale, the BOLD data can also be scaled by the global image standard deviation, equal to
#' \deqn{\sqrt{\frac{1}{T}\sum_{t=1}^T \sigma^2_t}},
#' where \eqn{\sigma^2_t} is the standard deviation across all voxels at time point \eqn{t}. If scaling is applied to the BOLD timeseries used in
#' template estimation, it should also be applied to the BOLD timeseries being analyzed with template ICA using the resulting templates to ensure
#' compatibility of scale.
#'
scale_BOLD <- function(BOLD, scale=FALSE){
dat <- BOLD
ntime <- ncol(dat) #length of timeseries
nvox <- nrow(dat) #number of data locations
if(ntime > nvox) warning('More time points than voxels. Are you sure?')
#center timeseries data across space and time and standardize scale
dat_t <- scale(t(dat), scale=FALSE) #center each voxel time series (remove mean image)
sig <- sqrt(mean(rowVars(dat))) #variance across image, averaged across time, square root to get SD
dat <- scale(t(dat_t), scale=FALSE) #center each image (centering across space)
if(scale) dat <- dat/sig #standardize by global SD
dat_ctr <- dat
return(dat_ctr)
}
#perform dual regression on test and retest data
DR1_ii <- dual_reg(BOLD1_ii_mat, GICA_mat, scale=scale)$S
DR2_ii <- dual_reg(BOLD2_ii_mat, GICA_mat, scale=scale)$S
DR1[ii,,] <- DR1_ii[inds,]
dim(DR1)
DR1 <- DR1[,,!flat_vox]
DR2 <- DR2[,,!flat_vox]
DR1[ii,,] <- DR1_ii[inds,]
DR2[ii,,] <- DR2_ii[inds,]
dim(DR1_ii)
for(ii in 2:N){
### READ IN BOLD DATA AND PERFORM DUAL REGRESSION
if(verbose) cat(paste0('\n Reading in data for subject ',ii,' of ',N))
#read in BOLD
fname_ii <- nifti_fnames[ii]
if(!file.exists(fname_ii)) {
missing_data <- c(missing_data, fname_ii)
if(verbose) cat(paste0('\n Data not available'))
next
}
BOLD1_ii <- readNIfTI(fname_ii, reorient = TRUE)
ntime <- dim(BOLD1_ii)[4]
ntime_vec <- c(ntime_vec, ntime)
if(length(ntime_vec)>2){
if(var(ntime_vec) > 0) stop('All BOLD timeseries should have the same duration')
}
BOLD1_ii_mat <- matrix(NA, V, ntime)
for(t in 1:ntime){
BOLD1_ii_mat[,t] <- BOLD1_ii[,,,t][mask2==1]
}
if(nrow(BOLD1_ii_mat) != nrow(GICA_mat)) stop(paste0('The number of data locations in GICA and BOLD timeseries data from subject ',ii,' do not match.'))
rm(BOLD1_ii)
#read in BOLD retest data OR create pseudo test-retest data
if(!retest){
part1 <- 1:round(ntime/2)
part2 <- setdiff(1:ntime, part1)
BOLD2_ii_mat <- BOLD1_ii_mat[,part2]
BOLD1_ii_mat <- BOLD1_ii_mat[,part1]
} else {
#read in BOLD from retest
fname_ii <- nifti_fnames2[ii]
if(!file.exists(fname_ii)) {
missing_data <- c(missing_data, fname_ii)
if(verbose) cat(paste0('\n Data not available'))
next
}
BOLD2_ii <- readNIfTI(fname_ii, reorient = TRUE)
if(dim(BOLD2_ii)[4] != ntime) stop('Retest BOLD data has different duration from first session.')
BOLD2_ii_mat <- matrix(NA, nvox, ntime)
for(t in 1:ntime){
BOLD2_ii_mat[,t] <- BOLD2_ii[,,,t][mask2==1]
}
rm(BOLD2_ii)
if(nrow(BOLD2_ii_mat) != nrow(GICA_mat)) stop(paste0('The number of data locations in GICA and BOLD retest timeseries data from subject ',ii,' do not match.'))
}
flat_vox <- ((rowVars(BOLD1_ii_mat)==0) | (rowVars(BOLD2_ii_mat)==0))
if(sum(flat_vox)>0) {
warning(paste0(sum(flat_vox), ' flat voxels detected. Removing these from the mask for this and future subjects. Updated mask will be returned with estimated templates.'))
mask2[mask2==1] <- (!flat_vox)
GICA_mat <- GICA_mat[!flat_vox,]
BOLD1_ii_mat <- BOLD1_ii_mat[!flat_vox,]
BOLD2_ii_mat <- BOLD2_ii_mat[!flat_vox,]
DR1 <- DR1[,,!flat_vox]
DR2 <- DR2[,,!flat_vox]
V <- sum(mask2)
}
#perform dual regression on test and retest data
DR1_ii <- dual_reg(BOLD1_ii_mat, GICA_mat, scale=scale)$S
DR2_ii <- dual_reg(BOLD2_ii_mat, GICA_mat, scale=scale)$S
DR1[ii,,] <- DR1_ii[inds,]
DR2[ii,,] <- DR2_ii[inds,]
}
if(verbose) cat('\n Estimating Template Mean')
V
cat(paste0('Total number of voxels in updated mask: ', V, '\n'))
mean1 <- apply(DR1, c(2,3), mean, na.rm=TRUE)
mean2 <- apply(DR2, c(2,3), mean, na.rm=TRUE)
template_mean <- t((mean1 + mean2)/2)
sum(is.na(template_mean))
class(template_mean)
# total variance
if(verbose) cat('\n Estimating Total Variance')
var_tot1 <- apply(DR1, c(2,3), var, na.rm=TRUE)
var_tot2 <- apply(DR2, c(2,3), var, na.rm=TRUE)
var_tot <- t((var_tot1 + var_tot2)/2)
# noise (within-subject) variance
if(verbose) cat('\n Estimating Within-Subject Variance')
DR_diff = DR1 - DR2;
var_noise <- t((1/2)*apply(DR_diff, c(2,3), var, na.rm=TRUE))
# signal (between-subject) variance
if(verbose) cat('\n Estimating Template (Between-Subject) Variance')
template_var <- var_tot - var_noise
template_var[template_var < 0] <- 0
sum(is.na(template_var))
out_fname_mean <- paste0(out_fname, '_mean')
out_fname_mean
writeNIfTI(template_mean, out_fname_mean)
writeNIfTI(template_var, out_fname_var)
out_fname_var <- paste0(out_fname, '_var')
writeNIfTI(template_var, out_fname_var)
getwd()
dim(template_mean)
template_mean_nifti <- array(NA, dim = dims)
BOLD1_ii <- readNIfTI(fname_ii, reorient = TRUE)
if(any(dim(BOLD1_ii)[-4] != dims)) stop('BOLD dims and mask dims do not match')
dim(BOLD1_ii)[-4]
dims
template_mean_nifti <- template_var_nifti <- array(NA, dim = c(dims, L))
dim(template_mean)
for(l in 1:L){
template_mean_nifti[,,,l] <- template_mean[,l]
template_var_nifti[,,,l] <- template_var[,l]
}
dim(template_mean[,l])
length(template_mean[,l])
V
template_mean_nifti[,,,l][mask2==1] <- template_mean[,l]
for(l in 1:L){
template_mean_nifti[,,,l][mask2==1] <- template_mean[,l]
template_var_nifti[,,,l][mask2==1] <- template_var[,l]
}
writeNIfTI(template_mean, out_fname_mean)
writeNIfTI(template_var, out_fname_var)
dim(mask2)
writeNIfTI(mask2, 'mask2')
summary(template_mean)
writeNIfTI(template_mean_nifti, out_fname_mean)
writeNIfTI(template_var_nifti, out_fname_var)
dim(template_mean_nifti[,,,l])
dim(mask2)
img_test <- mask2
img_test[mask2==1] <- template_mean[,1]
writeNIfTI(img_test, "test")
dim(template_mean)
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti <- template_var_nifti <- array(NA, dim = c(, L))
img_tmp <- mask2
for(l in 1:L){
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti[,,,l] <- img_tmp
img_tmp[mask2==1] <- template_var[,l]
template_var_nifti[,,,l] <- img_tmp
}
template_mean_nifti <- template_var_nifti <- array(NA, dim = c(dims, L))
img_tmp <- mask2
for(l in 1:L){
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti[,,,l] <- img_tmp
img_tmp[mask2==1] <- template_var[,l]
template_var_nifti[,,,l] <- img_tmp
}
writeNIfTI(template_mean_nifti, out_fname_mean)
img_tmp <- mask2; img_tmp[mask2==0] <- NA
for(l in 1:L){
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti[,,,l] <- img_tmp
img_tmp[mask2==1] <- template_var[,l]
template_var_nifti[,,,l] <- img_tmp
}
writeNIfTI(template_mean_nifti, out_fname_mean)
table(mask2)
img_tmp <- mask2; #img_tmp[mask2==0] <- NA
for(l in 1:L){
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti[,,,l] <- img_tmp
img_tmp[mask2==1] <- template_var[,l]
template_var_nifti[,,,l] <- img_tmp
}
writeNIfTI(template_mean_nifti, out_fname_mean)
template_mean_nifti <- template_var_nifti <- array(NA, dim = c(dims, L))
img_tmp <- mask2
for(l in 1:L){
img_tmp[mask2==1] <- template_mean[,l]
template_mean_nifti[,,,l] <- img_tmp
img_tmp[mask2==1] <- template_var[,l]
template_var_nifti[,,,l] <- img_tmp
}
writeNIfTI(template_mean_nifti, out_fname_mean)
writeNIfTI(template_var_nifti, out_fname_var)
writeNIfTI(mask2, 'mask2')
summary(template_var)
library(ciftiTools)
library(roxygen2)
roxygenize()
library(templateICAr)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(templateICAr)
roxygenize()
roxygenize()
roxygenize()
roxygenize()
roxygenize()
library(templateICAr)
seq_len(5)
gdrive_dir <- '~/Google Drive File Stream/My Drive'
main_dir <- file.path(gdrive_dir,'FromBox/RESEARCH/DiagnosticICA/data_analysis/')
data_dir <- '/N/dcwan/projects/hcp'
GICA_dir <- '~/HCP500_Parcellation_Timeseries_Netmats/groupICA/groupICA_3T_Q1-Q6related468_MSMsulc_d25.ica'
GICA_fname <- file.path(GICA_dir, 'melodic_IC.dscalar.nii')
inds <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,24,25) #which ICs to include in template (excludes likely noise ICs)
L <- length(inds)
setwd(main_dir)
# id_36 <- demo$Subject[demo$Age=='36+'] #13 subjects
#
# set.seed(237834)
# id_train_22 <- sort(sample(id_22, 200)) #test or retest rs-fMRI session may be missing for some of these subjects
# id_test_22 <- setdiff(id_22, id_train_22)
# set.seed(237834)
# id_train_31 <- sort(sample(id_31, 200))
# id_test_31 <- setdiff(id_31, id_train_31)
#
# save(id_train_22, id_test_22, id_train_31, id_test_31, file='subjects.Rdata')
load(file='subjects.Rdata')
#randomly sample test subjects from the 31-36 yo age group
set.seed(27348)
id_test_31_2 <- sort(sample(id_test_31, length(id_test_22), replace=FALSE))
ids_test <- c(id_test_22,id_test_31_2)
n_test <- length(ids_test)
ii=ids_test[1]
ind_ii <- which(ids_test==ii)
ind_ii
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
if(ii %in% id_test_22) group_ii <- 1
if(ii %in% id_test_31) group_ii <- 2
cat(paste0('Subject ',ind_ii,' (Group ',group_ii,')'))
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cifti_fname_ii <- file.path(data_dir, ii, cifti_fname_suff)
#cifti_fname_ii <- 'rfMRI_REST1_LR_Atlas_hp2000_clean.dtseries.nii'
if(!file.exists(cifti_fname_ii)) next
#                                           templates = list(group1=template_22, group2=template_31),
#                                           scale=TRUE,
#                                           Q2=100,
#                                           maxiter=100,
#                                           epsilon=0.01,
#                                           verbose=TRUE,
#                                           write_dir=NULL))
#
#   #print(dICA_ii$model_result$group_probs)
#   save(dICA_ii, file = paste0('results/dICA_',ii,'.RData'))
load(file = paste0('results/dICA_',ii,'.RData'))
groups_list[[ind_ii]] <- dICA_ii$theta_MLE$pr_z
group1 <- rep(NA, n_test)
group1[ind_ii] <- dICA_ii$theta_MLE$pr_z[1]
dICA_ii$theta_MLE$pr_z[1]
for(ii in ids_test){
ind_ii <- which(ids_test==ii)
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
if(ii %in% id_test_22) group_ii <- 1
if(ii %in% id_test_31) group_ii <- 2
cat(paste0('Subject ',ind_ii,' (Group ',group_ii,')'))
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cifti_fname_ii <- file.path(data_dir, ii, cifti_fname_suff)
#cifti_fname_ii <- 'rfMRI_REST1_LR_Atlas_hp2000_clean.dtseries.nii'
if(!file.exists(cifti_fname_ii)) next
load(file = paste0('results/dICA_',ii,'.RData'))
group1[ind_ii] <- dICA_ii$theta_MLE$pr_z[1]
}
cifti_fname_suff <- 'MNINonLinear/Results/rfMRI_REST1_LR/rfMRI_REST1_LR_Atlas_hp2000_clean.dtseries.nii'
cifti_fname2_suff <- 'MNINonLinear/Results/rfMRI_REST2_LR/rfMRI_REST2_LR_Atlas_hp2000_clean.dtseries.nii'
for(ii in ids_test){
ind_ii <- which(ids_test==ii)
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
if(ii %in% id_test_22) group_ii <- 1
if(ii %in% id_test_31) group_ii <- 2
cat(paste0('Subject ',ind_ii,' (Group ',group_ii,')'))
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cifti_fname_ii <- file.path(data_dir, ii, cifti_fname_suff)
#cifti_fname_ii <- 'rfMRI_REST1_LR_Atlas_hp2000_clean.dtseries.nii'
if(!file.exists(cifti_fname_ii)) next
load(file = paste0('results/dICA_',ii,'.RData'))
group1[ind_ii] <- dICA_ii$theta_MLE$pr_z[1]
}
group1
for(ii in ids_test){
ind_ii <- which(ids_test==ii)
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
if(ii %in% id_test_22) group_ii <- 1
if(ii %in% id_test_31) group_ii <- 2
cat(paste0('Subject ',ind_ii,' (Group ',group_ii,')'))
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cifti_fname_ii <- file.path(data_dir, ii, cifti_fname_suff)
load(file = paste0('results/dICA_',ii,'.RData'))
group1[ind_ii] <- dICA_ii$theta_MLE$pr_z[1]
}
names(dICA_ii)
names(dICA_ii$model_result)
names(dICA_ii$model_result$theta_MLE)
group1
mean(group1[1:31])
mean(1-group1[32:62], na.rm=TRUE)
length(group1[1:31])
length(group1[32:62])
group1[60] <- 0
group1[61] <- 0
mean(1-group1[32:62], na.rm=TRUE)
group1[62] <- 0
mean(1-group1[32:62], na.rm=TRUE)
roxygenize()
library(roxygen2)
roxygenize()
qt(0.975, df=47)
help(ar)
range(c(3,9))
range(3,9)
library(dplyr)
library(reshape2) #melt
library(ggplot2)
library(ggthemes)
library(stringr)
library(ciftiTools)
ciftiTools.setOption('wb_path','/Applications/workbench/')
library(templateICAr)
gdrive_dir <- '~/Google Drive File Stream/My Drive'
main_dir <- file.path(gdrive_dir,'FromBox/RESEARCH/DiagnosticICA/data_analysis/')
surfL_fname <- file.path(gdrive_dir,'FromBox/MEJIA_LAB/data/Q1-Q6_R440.L.inflated.32k_fs_LR.surf.gii')
surfR_fname <- file.path(gdrive_dir,'FromBox/MEJIA_LAB/data/Q1-Q6_R440.R.inflated.32k_fs_LR.surf.gii')
surfL <- make_surf(surfL_fname)
surfR <- make_surf(surfR_fname)
# id_36 <- demo$Subject[demo$Age=='36+'] #13 subjects
#
# set.seed(237834)
# id_train_22 <- sort(sample(id_22, 200)) #test or retest rs-fMRI session may be missing for some of these subjects
# id_test_22 <- setdiff(id_22, id_train_22)
# set.seed(237834)
# id_train_31 <- sort(sample(id_31, 200))
# id_test_31 <- setdiff(id_31, id_train_31)
#
# save(id_train_22, id_test_22, id_train_31, id_test_31, file='subjects.Rdata')
load(file='subjects.Rdata')
cifti_fname_suff <- 'MNINonLinear/Results/rfMRI_REST1_LR/rfMRI_REST1_LR_Atlas_hp2000_clean.dtseries.nii'
cifti_fname2_suff <- 'MNINonLinear/Results/rfMRI_REST2_LR/rfMRI_REST2_LR_Atlas_hp2000_clean.dtseries.nii'
# cifti_fnames_22 <- file.path(data_dir,id_train_22[!is.na(id_train_22)], cifti_fname_suff)
# cifti_fnames2_22 <- file.path(data_dir,id_train_22[!is.na(id_train_22)], cifti_fname2_suff)
# template_22 <- estimate_template.cifti(cifti_fnames = cifti_fnames_22,
#                                        cifti_fnames2 = cifti_fnames2_22,
#                                        GICA_fname = GICA_fname,
#                                        brainstructures = c('left','right'),
#                                        scale=TRUE,
#                                        out_fname = 'templates/template_22')
#save(template_22, file = 'templates/templates_22.RData')
load(file = 'templates/templates_22.RData')
getwd()
setwd(main_dir)
# cifti_fnames_22 <- file.path(data_dir,id_train_22[!is.na(id_train_22)], cifti_fname_suff)
# cifti_fnames2_22 <- file.path(data_dir,id_train_22[!is.na(id_train_22)], cifti_fname2_suff)
# template_22 <- estimate_template.cifti(cifti_fnames = cifti_fnames_22,
#                                        cifti_fnames2 = cifti_fnames2_22,
#                                        GICA_fname = GICA_fname,
#                                        brainstructures = c('left','right'),
#                                        scale=TRUE,
#                                        out_fname = 'templates/template_22')
#save(template_22, file = 'templates/templates_22.RData')
load(file = 'templates/templates_22.RData')
ls()
class(template_22)
names(template_22)
names(template_22$template_mean$data)
dim(template_22$template_mean$data$cortex_left)
dim(template_22$template_mean$data$cortex_right)
help(as.xifti)
sessionInfo()
