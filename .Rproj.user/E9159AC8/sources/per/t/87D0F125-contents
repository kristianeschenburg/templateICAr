library(R.matlab) #readMat
library(matrixStats) #colVars
library(INLA)
inla.setOption(pardiso.license = '~/pardiso.lic')

setwd('~/Dropbox/RESEARCH/SpatialTemplateICA/simulation')

################################
# GENERATE GROUP ICS
################################

### Image settings

Nx <- 46
Ny <- 55
N <- Nx*Ny #number of voxels
# FOV <- 192  #field of view (mm)
# resx  <- FOV/Nx #voxel size in mm (x-dim)
# resy  <- FOV/Ny #voxel size in mm (y-dim)

# ### Define kernel for each IC

# FWHM <- c(30, 40, 45) #full-width-half-max (mm) of smoothing kernel for each IC
# sig <- FWHM/(2*sqrt(2*log(2))) #sd (mm) of smoothing kernel
# sigx <- sig/resx #sd (voxels) of smoothing kernel (x-dim)
# sigy <- sig/resy #sd (voxels) of smoothing kernel (y-dim)

# len <- (-31:32)

# zx <- dnorm(x=len,mean=0,sd=sigx[1])
# zy <- dnorm(x=len,mean=0,sd=sigy[1])
# K1 <- zx %*% t(zy)
# K1 <- K1/max(K1)

# zx <- dnorm(x=len,mean=0,sd=sigx[2])
# zy <- dnorm(x=len,mean=0,sd=sigy[2])
# K2 <- t(zx) %*% zy
# K2 <- K2/max(K2)

# zx <- dnorm(x=len,mean=0,sd=sigx[3])
# zy <- dnorm(x=len,mean=0,sd=sigy[3])
# K3 <- t(zx) %*% zy
# K3 <- K3/max(K3)

### Convolve smoothing kernel with binary image (IN MATLAB)

# Q <- matrix(0,Nx,Ny)

# # Center of intensity
# x1 <- 12; y1 <- 15
# x2 <- 35; y2 <- 40
# x3 <- 15; y3 <- 40
# #xy <- matrix(c(x1,y1,x2,y2,x3,y3), nrow=3, byrow=TRUE)


################################
# READ IN TEMPLATES AND SUBJECT ICS FROM MATLAB
################################

groupICs <- readMat('groupICs.mat')
GICA <- groupICs$tempICmean.s
template_mean <- groupICs$tempICmean.p #Nx3
template_var <- groupICs$tempICvar.p #Nx3

subjICs <- readMat('subjICs.mat')
subjICs <- subjICs$subjICs.p #based on perturbing group settings (results in smooth deviations)
n <- dim(subjICs)[1] #number of subjects
n <- 1 #start with one subject

################################
# GENERATE SUBJECT FMRI DATA FROM ICS
################################

#time courses from real fMRI data using dual regression
ts1 <- scale(read.csv('ts1_645450.csv', header=FALSE))
ts2 <- scale(read.csv('ts2_645450.csv', header=FALSE))
ts <- rbind(ts1,ts2)
rm(ts1, ts2)

#determine signal variance for SNR to fix error variance
tvar <- matrix(0,3,16)
#identify peak voxels for each IC (top 1% of each IC)
quantile99 <- apply(template_mean, 2, quantile, probs=0.99, na.rm=TRUE)
peaks <- (template_mean > matrix(quantile99, ncol=3, nrow=N, byrow=TRUE))

for(q in 1:3){
	for(l in 1:16){ #loop through all 16 candidate timecourses
    	tc_lq <- ts[,l] %*% t(template_mean[peaks[,q],q]); #temporal signal l for IC q at each peak voxel
    	tvar[q,l] <- mean(colVars(tc_lq)); #average temporal variance of those time courses over peak voxels
	}
}

sd_sig <- sqrt(mean(tvar))
sd_err <- 2*sd_sig #for SNR=sd_sig/sd_err=0.5

#generate fMRI data
Dat <- array(0, dim=c(n,2400,N))
C_true <- array(NA, dim=c(n,3,3)) #save FC matrices
for(ii in 1:n){
	print(ii)
	inds <- sample(16,3); #select 3 of the 16 real timecourses to use
	ts_ii <- ts[,inds]
	#Generate residuals
	E_ii <- matrix(rnorm(2400*N,mean=0,sd=sd_err),nrow=2400,ncol=N)
	#Generate fMRI data
	Dat[ii,,] <- ts_ii %*% subjICs[ii,,] + E_ii
	C_true[ii,,] <- cor(ts_ii)
}


################################
# ESTIMATE SUBJECT-LEVEL ICS
################################

template_mean <- t(template_mean)
template_var <- t(template_var)

ntime <- 200

source('~/Box Sync/SOFTWARE/templateICAr/R/make_mesh.R')
source('~/Box Sync/SOFTWARE/templateICAr/R/dim_reduce.R')
source('~/Box Sync/SOFTWARE/templateICAr/R/dual_reg.R')
source('~/Box Sync/SOFTWARE/templateICAr/R/scale_BOLD.R')
source('~/Box Sync/SOFTWARE/templateICAr/R/EM_algorithm.R')

#make mesh for spatial template ICA
mask <- matrix(1,Nx,Ny)
mymesh <- make_mesh(mask)

S_DR <- array(NA, dim=c(n,3,N)) #save IC estimates
C_DR <- array(NA, dim=c(n,3,3)) #save FC matrices
for(ii in 1:n){

	### PERFORM DUAL REGRESSION

	dat_ii <- Dat[ii,1:ntime,] #TxV
	subjIC_DR_ii <- dual_reg(dat_ii, template_mean)
	S_DR[ii,,] <- subjIC_DR_ii$S
	C_DR[ii,,] <- cor(subjIC_DR_ii$A)
	dat_ctr <- subjIC_DR_ii$dat_ctr


	### PERFORM STANDARD TEMPLATE ICA


	### PERFORM SPATIAL TEMPLATE ICA

	#HERE

	templateICA(template_mean = template_mean,
				template_var = template_var,
				BOLD = dat_ctr,
				mesh=mymesh, #use spatial template ICA model
				maxQ=3) #no nuisance ICs



}























