% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/templateICA.R
\name{templateICA}
\alias{templateICA}
\title{Perform template independent component analysis (ICA) using expectation-maximization (EM)}
\usage{
templateICA(template_mean, template_var, BOLD, scale_BOLD = FALSE,
  mesh = NULL, maxQ = NULL, common_smoothness = TRUE,
  maxiter = 100, epsilon = 0.01, verbose = TRUE, error_sd = NULL)
}
\arguments{
\item{template_mean}{(LxV matrix) template mean estimates, i.e. mean of empirical population prior for each of L independent components}

\item{template_var}{(LxV matrix) template variance estimates, i.e. between-subject variance of empirical population prior for each of L ICs}

\item{BOLD}{(TxV matrix) BOLD fMRI data matrix, where T is the number of volumes (time points) and V is the number of brain locations}

\item{scale_BOLD}{Logical indicating whether BOLD data should be scaled by the spatial standard deviation before model fitting. If done when estimating templates, should be done here too.}

\item{mesh}{Either NULL (assume spatial independence) or an object of type \code{templateICA_mesh} created by \code{make_mesh()} (spatial priors are assumed on each independent component)}

\item{maxQ}{Maximum number of ICs (template+nuisance) to identify (L <= maxQ <= T)}

\item{common_smoothness}{If TRUE, use the common smoothness version of the spatial template ICA model, which assumes that all IC's have the same smoothness parameter, \eqn{\kappa}}

\item{maxiter}{Maximum number of EM iterations}

\item{epsilon}{Smallest proportion change between iterations (e.g. .01)}

\item{verbose}{If TRUE, display progress of algorithm}

\item{error_sd}{The residual standard deviation from dimension reduction, or NULL if to be estimated through EM.}
}
\value{
A list containing the estimated independent components S (a LxV matrix), their mixing matrix A (a TxL matrix), and the number of nuisance ICs estimated (Q_nuis)
}
\description{
Perform template independent component analysis (ICA) using expectation-maximization (EM)
}
